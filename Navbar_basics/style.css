/* 
- Applied CSS reset or CSS normalization 
- Create a consistent styling foundation
*/
*,
body {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

.navigation-header {
    background-color: rgb(73, 51, 153);
    padding: 0 15px;
    height: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
}


/* 
Since we are working with only one <nav>element,
we do not need to give it a class name. Select the nav element using its element name. If the project you are working requires a uniform width on all parent containers,
then you are going to set the max-width of the nav to that required max-width of your project. For the sake of this project,
we are going to set the max-width to 1200px. To make the container stretch to the full max-width,
apply 100% width. This way,
the container stretches up to the max-width but won't exceed the maximum width making the container responsive in that process.
*/

nav {
    width: 100%;
    max-width: 1200px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}


/* 
Style the logo
Select the anchor element within the logo container. Set its text color to ghostwhite. Remove any underlining or decoration from the text within the <a>element. Set the font-weight to bold (700 is the numeric value for bold font-weight). Set the font-size to 26 pixels.
*/

.logo-container>a {
    color: ghostwhite;
    text-decoration: none;
    font-weight: 700;
    font-size: 26px;
}

/* 
Style the navigation items 
Select the navigation items using its class name. Within the navigation items,we have three navigation links,
make them align horizontally using the flex layout.
*/

.navigation-items {
    display: flex;
    gap: 40px;
}


/* 
Style the navigation links 
Select the links within the navigation items using the direction child selector. Set the text color to "ghostwhite",
remove text decoration,
apply a font weight of 500,
and set the font size to 16 pixels. Also add a transition for smooth hover effect.
*/

.navigation-items>a {
    color: ghostwhite;
    text-decoration: none;
    font-weight: 500;
    font-size: 16px;
    transition: .4s ease-in-out;
}

/* 
Add hover effect to navigation links 
Simply change the color of the navigation to white,
or based on the requirement of your project.
*/

.navigation-items>a:hover {
    color: lightskyblue;
}

/* 
Style the hamburger 
The hamburger has two child elements within it which includes the openHam and the closeHam icons. Here we used HTML entities for the icons,
you can import icons from icon libraries such as font awesome,
google fonts or icon library. On desktop and laptop screens,
we definitely do not want the hamburger icons to show,
so we hide them by default,
then make them show up on smaller screens using media queries. But we are going to add some other default styling to the hamburger.
*/

.hamburger {
    display: none;
    font-size: 20px;
    font-weight: 800;
    color: white;
}

/* 
Create a different style for hamburger,
and the navigation items on smaller screens using CSS media query Here,
we are going to have a different style from tablet devices with screen sizes from 768px below, this would also cover for mobile screens.

Media query is commonly used for creating responsive designs that adapt to smaller screen sizes,
such as tablets or smaller desktop screens. 

In the above code snippet,
the styles within the media query will only be applied when the screen width is 768 pixels or smaller. 

Elements are reselected within the curly braces and are styled to fit properly to the current screen size as written in the media query which is 768px in this case. 

The hamburger and the navigation items will be reselected and styled to fit properly for the 768px screens
*/

@media screen and (max-width:768px) {
    .hamburger {
        display: flex;
        cursor: pointer;
    }

    .hamburger #closeHam {
        display: none;
    }
}